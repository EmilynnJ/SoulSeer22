// frontend/src/components/reader/ReaderDashboard.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../../services/api';
import { useAuth } from '../../hooks/useAuth';
import { formatCurrency, formatDate } from '../../utils/formatters';
import './ReaderDashboard.css';

const ReaderDashboard = () => {
  const { user } = useAuth();
  const [stats, setStats] = useState(null);
  const [upcomingSessions, setUpcomingSessions] = useState([]);
  const [availabilityStatus, setAvailabilityStatus] = useState({
    isAvailableForChat: false,
    isAvailableForVideo: false,
    isAvailableForVoice: false
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        
        // Fetch reader stats
        const statsResponse = await api.get('/api/readings/stats');
        setStats(statsResponse.data.data);
        
        // Fetch upcoming sessions
        const sessionsResponse = await api.get('/api/sessions?status=scheduled&role=reader');
        setUpcomingSessions(sessionsResponse.data.data);
        
        // Set availability status from user data
        if (user) {
          setAvailabilityStatus({
            isAvailableForChat: user.isAvailableForChat || false,
            isAvailableForVideo: user.isAvailableForVideo || false,
            isAvailableForVoice: user.isAvailableForVoice || false
          });
        }
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching dashboard data:', err);
        setError('Failed to load dashboard data. Please try again.');
        setLoading(false);
      }
    };
    
    fetchDashboardData();
  }, [user]);
  
  const handleStatusChange = async (type, value) => {
    try {
      const updatedStatus = { ...availabilityStatus, [type]: value };
      setAvailabilityStatus(updatedStatus);
      
      await api.put('/api/readers/availability', {
        [type]: value
      });
    } catch (err) {
      console.error('Error updating availability status:', err);
      setError('Failed to update availability. Please try again.');
      
      // Revert UI state on error
      setAvailabilityStatus({ ...availabilityStatus });
    }
  };
  
  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>Loading dashboard...</p>
      </div>
    );
  }
  
  return (
    <div className="reader-dashboard-container">
      <h1 className="dashboard-title">Reader Dashboard</h1>
      
      {error && (
        <div className="error-alert">
          <p>{error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="retry-button"
          >
            Retry
          </button>
        </div>
      )}
      
      <div className="dashboard-grid">
        {/* Availability Section */}
        <div className="dashboard-card availability-card">
          <h2>Your Availability</h2>
          
          <div className="availability-toggles">
            <div className="availability-toggle">
              <label className="toggle-label">
                <span className="service-icon chat-icon">💬</span>
                <span>Available for Chat</span>
              </label>
              <label className="switch">
                <input 
                  type="checkbox" 
                  checked={availabilityStatus.isAvailableForChat}
                  onChange={(e) => handleStatusChange('isAvailableForChat', e.target.checked)}
                />
                <span className="slider round"></span>
              </label>
            </div>
            
            <div className="availability-toggle">
              <label className="toggle-label">
                <span className="service-icon video-icon">📹</span>
                <span>Available for Video</span>
              </label>
              <label className="switch">
                <input 
                  type="checkbox" 
                  checked={availabilityStatus.isAvailableForVideo}
                  onChange={(e) => handleStatusChange('isAvailableForVideo', e.target.checked)}
                />
                <span className="slider round"></span>
              </label>
            </div>
            
            <div className="availability-toggle">
              <label className="toggle-label">
                <span className="service-icon voice-icon">🎤</span>
                <span>Available for Voice</span>
              </label>
              <label className="switch">
                <input 
                  type="checkbox" 
                  checked={availabilityStatus.isAvailableForVoice}
                  onChange={(e) => handleStatusChange('isAvailableForVoice', e.target.checked)}
                />
                <span className="slider round"></span>
              </label>
            </div>
          </div>
          
          <div className="rate-cards">
            <h3>Your Current Rates</h3>
            <div className="rates-grid">
              <div className="rate-card">
                <div className="rate-value">${user?.rates?.chat || 0}/min</div>
                <div className="rate-label">Chat</div>
              </div>
              <div className="rate-card">
                <div className="rate-value">${user?.rates?.video || 0}/min</div>
                <div className="rate-label">Video</div>
              </div>
              <div className="rate-card">
                <div className="rate-value">${user?.rates?.voice || 0}/min</div>
                <div className="rate-label">Voice</div>
              </div>
            </div>
            <Link to="/reader/profile" className="update-rates-link">Update Rates</Link>
          </div>
        </div>
        
        {/* Stats Section */}
        <div className="dashboard-card stats-card">
          <h2>Performance Overview</h2>
          
          {stats ? (
            <>
              <div className="stats-grid">
                <div className="stat-item">
                  <div className="stat-value">{stats.totalSessions}</div>
                  <div className="stat-label">Total Sessions</div>
                </div>
                <div className="stat-item">
                  <div className="stat-value">{formatCurrency(stats.totalEarnings)}</div>
                  <div className="stat-label">Total Earnings</div>
                </div>
                <div className="stat-item">
                  <div className="stat-value">
                    {stats.averageRating ? stats.averageRating.toFixed(1) : 'N/A'}
                  </div>
                  <div className="stat-label">Average Rating</div>
                </div>
                <div className="stat-item">
                  <div className="stat-value">
                    {stats.totalHours ? stats.totalHours.toFixed(1) : '0'}
                  </div>
                  <div className="stat-label">Total Hours</div>
                </div>
              </div>
              
              <h3>This Month</h3>
              <div className="month-stats">
                <div className="stat-item">
                  <div className="stat-value">{stats.monthlySessions || 0}</div>
                  <div className="stat-label">Sessions</div>
                </div>
                <div className="stat-item">
                  <div className="stat-value">{formatCurrency(stats.monthlyEarnings || 0)}</div>
                  <div className="stat-label">Earnings</div>
                </div>
              </div>
            </>
          ) : (
            <div className="no-stats-message">
              <p>No statistics available yet</p>
              <p>Complete readings to see your performance metrics</p>
            </div>
          )}
          
          <Link to="/reader/earnings" className="view-details-link">View Full Earnings</Link>
        </div>
        
        {/* Upcoming Sessions Section */}
        <div className="dashboard-card sessions-card">
          <h2>Upcoming Sessions</h2>
          
          {upcomingSessions.length > 0 ? (
            <div className="sessions-list">
              {upcomingSessions.map(session => (
                <div key={session._id} className="session-item">
                  <div className="session-client">
                    <img 
                      src={session.client.avatar || '/assets/default-avatar.jpg'}
                      alt={session.client.username}
                      className="client-avatar"
                    />
                    <span>{session.client.username}</span>
                  </div>
                  <div className="session-details">
                    <div className="session-type">
                      <span className={`session-type-icon ${session.type}`}>
                        {session.type === 'chat' ? '💬' : 
                         session.type === 'video' ? '📹' : '🎤'}
                      </span>
                      <span className="session-type-label">{session.type}</span>
                    </div>
                    <div className="session-time">
                      {session.scheduledAt ? formatDate(session.scheduledAt) : 'Flexible'}
                    </div>
                  </div>
                  <div className="session-actions">
                    {session.status === 'scheduled' && (
                      <Link to={`/sessions/${session._id}`} className="btn btn-primary btn-sm">
                        Start
                      </Link>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="no-sessions-message">
              <p>No upcoming sessions</p>
              <p>Sessions will appear here when clients book with you</p>
            </div>
          )}
          
          <Link to="/reader/sessions" className="view-all-link">View All Sessions</Link>
        </div>
        
        {/* Quick Actions Section */}
        <div className="dashboard-card actions-card">
          <h2>Quick Actions</h2>
          
          <div className="action-buttons">
            <Link to="/reader/availability" className="action-button">
              <span className="action-icon">📅</span>
              <span className="action-label">Manage Schedule</span>
            </Link>
            
            <Link to="/reader/store" className="action-button">
              <span className="action-icon">🛍️</span>
              <span className="action-label">Manage Shop</span>
            </Link>
            
            <Link to="/live/create" className="action-button">
              <span className="action-icon">📡</span>
              <span className="action-label">Go Live</span>
            </Link>
            
            <Link to="/reader/earnings/withdraw" className="action-button">
              <span className="action-icon">💰</span>
              <span className="action-label">Withdraw Earnings</span>
            </Link>
          </div>
          
          <div className="balance-overview">
            <div className="balance-item">
              <div className="balance-label">Current Balance</div>
              <div className="balance-value">{formatCurrency(user?.pendingBalance || 0)}</div>
            </div>
            <div className="balance-item">
              <div className="balance-label">Total Paid Out</div>
              <div className="balance-value">{formatCurrency(user?.totalPaidOut || 0)}</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReaderDashboard;

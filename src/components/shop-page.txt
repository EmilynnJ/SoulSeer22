// client/src/pages/Shop.jsx
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { 
  Box, 
  Container, 
  Typography, 
  Tabs, 
  Tab, 
  Grid, 
  CircularProgress,
  Paper,
  InputBase,
  IconButton,
  Divider,
  Chip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Slider,
  Button
} from '@mui/material';
import { 
  Search as SearchIcon,
  FilterList as FilterListIcon,
  Close as CloseIcon
} from '@mui/icons-material';
import ProductCard from '../components/Shop/ProductCard';
import { fetchProducts, fetchCategories } from '../redux/actions/productActions';
import { addToCart } from '../redux/actions/cartActions';
import { formatCurrency } from '../utils/formatters';

const Shop = () => {
  const dispatch = useDispatch();
  
  // Redux state
  const { products, categories, featured, loading } = useSelector(state => state.products);
  const { items: cartItems } = useSelector(state => state.cart);
  
  // Component state
  const [tabValue, setTabValue] = useState(0);
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [priceRange, setPriceRange] = useState([0, 1000]);
  const [sortBy, setSortBy] = useState('-createdAt');
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  
  // Product type based on tab
  const productTypes = ['digital', 'physical', 'service'];
  const currentType = productTypes[tabValue];
  
  // Fetch products on component mount and when filters change
  useEffect(() => {
    dispatch(fetchCategories());
    loadProducts();
  }, [dispatch, currentType, selectedCategory, priceRange, sortBy, page, searchQuery]);
  
  // Load products with current filters
  const loadProducts = () => {
    const filters = {
      type: currentType,
      page,
      limit: 12,
      sort: sortBy,
      minPrice: priceRange[0],
      maxPrice: priceRange[1]
    };
    
    if (selectedCategory) {
      filters.category = selectedCategory;
    }
    
    if (searchQuery) {
      filters.search = searchQuery;
    }
    
    dispatch(fetchProducts(filters, page === 1));
    
    // Check if there are more products to load
    if (products && products.pagination) {
      setHasMore(products.pagination.page < products.pagination.pages);
    }
  };
  
  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
    setPage(1);
  };
  
  // Handle search
  const handleSearch = (e) => {
    e.preventDefault();
    setPage(1);
  };
  
  // Handle search input change
  const handleSearchInputChange = (e) => {
    setSearchQuery(e.target.value);
  };
  
  // Handle filter toggle
  const handleFilterToggle = () => {
    setShowFilters(!showFilters);
  };
  
  // Handle category change
  const handleCategoryChange = (e) => {
    setSelectedCategory(e.target.value);
    setPage(1);
  };
  
  // Handle price range change
  const handlePriceRangeChange = (event, newValue) => {
    setPriceRange(newValue);
  };
  
  // Handle price range change commit
  const handlePriceRangeChangeCommit = () => {
    setPage(1);
  };
  
  // Handle sort change
  const handleSortChange = (e) => {
    setSortBy(e.target.value);
    setPage(1);
  };
  
  // Handle clear filters
  const handleClearFilters = () => {
    setSelectedCategory('');
    setPriceRange([0, 1000]);
    setSortBy('-createdAt');
    setSearchQuery('');
    setPage(1);
  };
  
  // Handle load more
  const handleLoadMore = () => {
    setPage(prevPage => prevPage + 1);
  };
  
  // Handle add to cart
  const handleAddToCart = (product) => {
    dispatch(addToCart(product, 1));
  };
  
  // Check if product is in cart
  const isInCart = (productId) => {
    return cartItems.some(item => item.product._id === productId);
  };
  
  return (
    <Box 
      sx={{ 
        minHeight: 'calc(100vh - 64px)',
        background: 'linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.5))',
        py: 4
      }}
    >
      <Container maxWidth="lg">
        <Typography 
          variant="h2" 
          textAlign="center" 
          color="primary.light"
          sx={{ 
            mb: 1,
            fontWeight: 300,
            textShadow: '0 0 10px rgba(255, 192, 203, 0.7)'
          }}
        >
          SoulSeer Shop
        </Typography>
        <Typography 
          variant="h6" 
          textAlign="center" 
          color="white" 
          sx={{ 
            mb: 4,
            fontWeight: 300,
            maxWidth: 700,
            mx: 'auto'
          }}
        >
          Discover spiritual tools, guidance materials, and personalized services
        </Typography>
        
        {/* Search and Filter Bar */}
        <Paper
          component="form"
          onSubmit={handleSearch}
          sx={{ 
            p: '2px 4px', 
            display: 'flex', 
            alignItems: 'center',
            mb: 3,
            backgroundColor: 'rgba(0, 0, 0, 0.7)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(255, 255, 255, 0.1)'
          }}
        >
          <InputBase
            sx={{ ml: 1, flex: 1, color: 'white' }}
            placeholder="Search for products..."
            value={searchQuery}
            onChange={handleSearchInputChange}
          />
          <IconButton type="submit" sx={{ p: '10px', color: 'white' }}>
            <SearchIcon />
          </IconButton>
          <Divider sx={{ height: 28, m: 0.5, backgroundColor: 'rgba(255, 255, 255, 0.1)' }} orientation="vertical" />
          <IconButton 
            sx={{ p: '10px', color: showFilters ? 'primary.main' : 'white' }}
            onClick={handleFilterToggle}
          >
            <FilterListIcon />
          </IconButton>
        </Paper>
        
        {/* Filters */}
        {showFilters && (
          <Paper
            sx={{ 
              p: 3, 
              mb: 3,
              backgroundColor: 'rgba(0, 0, 0, 0.7)',
              backdropFilter: 'blur(10px)',
              border: '1px solid rgba(255, 255, 255, 0.1)'
            }}
          >
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6" color="white">Filters</Typography>
              <Button
                startIcon={<CloseIcon />}
                onClick={handleClearFilters}
                color="primary"
                variant="text"
              >
                Clear All
              </Button>
            </Box>
            
            <Grid container spacing={3}>
              {/* Category filter */}
              <Grid item xs={12} md={4}>
                <FormControl fullWidth variant="outlined">
                  <InputLabel>Category</InputLabel>
                  <Select
                    value={selectedCategory}
                    onChange={handleCategoryChange}
                    label="Category"
                  >
                    <MenuItem value="">All Categories</MenuItem>
                    {categories.map((category, index) => (
                      <MenuItem key={index} value={category}>
                        {category}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              {/* Price range filter */}
              <Grid item xs={12} md={4}>
                <Typography id="price-range-slider" gutterBottom color="text.secondary">
                  Price Range: {formatCurrency(priceRange[0])} - {formatCurrency(priceRange[1])}
                </Typography>
                <Slider
                  value={priceRange}
                  onChange={handlePriceRangeChange}
                  onChangeCommitted={handlePriceRangeChangeCommit}
                  valueLabelDisplay="auto"
                  valueLabelFormat={(value) => formatCurrency(value)}
                  min={0}
                  max={1000}
                  aria-labelledby="price-range-slider"
                />
              </Grid>
              
              {/* Sort by filter */}
              <Grid item xs={12} md={4}>
                <FormControl fullWidth variant="outlined">
                  <InputLabel>Sort By</InputLabel>
                  <Select
                    value={sortBy}
                    onChange={handleSortChange}
                    label="Sort By"
                  >
                    <MenuItem value="-createdAt">Newest First</MenuItem>
                    <MenuItem value="createdAt">Oldest First</MenuItem>
                    <MenuItem value="price">Price: Low to High</MenuItem>
                    <MenuItem value="-price">Price: High to Low</MenuItem>
                    <MenuItem value="name">Name: A to Z</MenuItem>
                    <MenuItem value="-name">Name: Z to A</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </Paper>
        )}
        
        {/* Product Type Tabs */}
        <Box sx={{ 
          mb: 4, 
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          borderRadius: 1
        }}>
          <Tabs
            value={tabValue}
            onChange={handleTabChange}
            indicatorColor="primary"
            textColor="primary"
            variant="fullWidth"
            aria-label="product type tabs"
          >
            <Tab 
              label="Digital Products" 
              sx={{ 
                color: 'white',
                '&.Mui-selected': { color: 'primary.light' }
              }}
            />
            <Tab 
              label="Physical Products" 
              sx={{ 
                color: 'white',
                '&.Mui-selected': { color: 'primary.light' }
              }}
            />
            <Tab 
              label="Services" 
              sx={{ 
                color: 'white',
                '&.Mui-selected': { color: 'primary.light' }
              }}
            />
          </Tabs>
        </Box>
        
        {/* Active Filters */}
        {(selectedCategory || searchQuery || priceRange[0] > 0 || priceRange[1] < 1000) && (
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 3 }}>
            {selectedCategory && (
              <Chip
                label={`Category: ${selectedCategory}`}
                onDelete={() => setSelectedCategory('')}
                color="primary"
                variant="outlined"
              />
            )}
            {searchQuery && (
              <Chip
                label={`Search: ${searchQuery}`}
                onDelete={() => setSearchQuery('')}
                color="primary"
                variant="outlined"
              />
            )}
            {(priceRange[0] > 0 || priceRange[1] < 1000) && (
              <Chip
                label={`Price: ${formatCurrency(priceRange[0])} - ${formatCurrency(priceRange[1])}`}
                onDelete={() => setPriceRange([0, 1000])}
                color="primary"
                variant="outlined"
              />
            )}
          </Box>
        )}
        
        {/* Products Grid */}
        {loading && page === 1 ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
            <CircularProgress />
          </Box>
        ) : products.data && products.data.length > 0 ? (
          <>
            <Grid container spacing={3}>
              {products.data.map((product) => (
                <Grid item xs={12} sm={6} md={4} key={product._id}>
                  <ProductCard 
                    product={product} 
                    onAddToCart={handleAddToCart}
                    isInCart={isInCart(product._id)}
                  />
                </Grid>
              ))}
            </Grid>
            
            {/* Load More Button */}
            {hasMore && (
              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
                <Button
                  variant="outlined"
                  color="primary"
                  onClick={handleLoadMore}
                  disabled={loading}
                  startIcon={loading && page > 1 ? <CircularProgress size={20} /> : null}
                >
                  {loading && page > 1 ? 'Loading...' : 'Load More'}
                </Button>
              </Box>
            )}
          </>
        ) : (
          <Box sx={{ 
            display: 'flex', 
            flexDirection: 'column',
            alignItems: 'center', 
            justifyContent: 'center',
            py: 8,
            textAlign: 'center'
          }}>
            <Typography variant="h5" color="white" gutterBottom>
              No products found
            </Typography>
            <Typography variant="body1" color="text.secondary">
              Try adjusting your search criteria or browse our featured products.
            </Typography>
            <Button
              variant="contained"
              color="primary"
              onClick={handleClearFilters}
              sx={{ mt: 2 }}
            >
              Clear Filters
            </Button>
          </Box>
        )}
        
        {/* Featured Products Section */}
        {featured && featured.length > 0 && (
          <Box sx={{ mt: 8 }}>
            <Typography 
              variant="h4" 
              color="primary.light"
              sx={{ 
                mb: 3,
                textAlign: 'center',
                fontWeight: 300,
                textShadow: '0 0 10px rgba(255, 192, 203, 0.5)'
              }}
            >
              Featured Products
            </Typography>
            <Grid container spacing={3}>
              {featured.map((product) => (
                <Grid item xs={12} sm={6} md={4} key={product._id}>
                  <ProductCard 
                    product={product} 
                    onAddToCart={handleAddToCart}
                    isInCart={isInCart(product._id)}
                    featured
                  />
                </Grid>
              ))}
            </Grid>
          </Box>
        )}
      </Container>
    </Box>
  );
};

export default Shop;

// App.jsx - Main Application Component
import { BrowserRouter as Router } from 'react-router-dom';
import { Suspense, lazy, useEffect } from 'react';
import { AuthProvider } from './contexts/AuthContext';
import { CartProvider } from './contexts/CartContext';
import { SocketProvider } from './contexts/SocketContext';
import { ThemeProvider } from './contexts/ThemeContext';
import AppRoutes from './routes';
import Loader from './components/ui/Loader';
import './theme.css';

const App = () => {
  // Set background image
  useEffect(() => {
    document.body.classList.add('has-background');
    
    return () => {
      document.body.classList.remove('has-background');
    };
  }, []);

  return (
    <ThemeProvider>
      <AuthProvider>
        <SocketProvider>
          <CartProvider>
            <Router>
              <Suspense fallback={<Loader />}>
                <AppRoutes />
              </Suspense>
            </Router>
          </CartProvider>
        </SocketProvider>
      </AuthProvider>
    </ThemeProvider>
  );
};

export default App;

// main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// routes.jsx
import { Routes, Route, Navigate } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';
import MainLayout from './components/layout/MainLayout';

// Lazy load pages for better performance
import Welcome from './pages/Welcome';
import Home from './pages/Home';
import About from './pages/About';
import Readers from './pages/Readers';
import Live from './pages/Live';
import Shop from './pages/Shop';
import Community from './pages/Community';
import Messages from './pages/Messages';
import HelpCenter from './pages/HelpCenter';
import Policies from './pages/Policies';
import ApplyReader from './pages/ApplyReader';
import Login from './pages/Login';
import Register from './pages/Register';

const AdminDashboard = React.lazy(() => import('./pages/dashboard/AdminDashboard'));
const ReaderDashboard = React.lazy(() => import('./pages/dashboard/ReaderDashboard'));
const ClientDashboard = React.lazy(() => import('./pages/dashboard/ClientDashboard'));

// Protected route component
const ProtectedRoute = ({ children, allowedRoles }) => {
  const { user, isAuthenticated } = useAuth();
  
  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }
  
  if (allowedRoles && !allowedRoles.includes(user.role)) {
    return <Navigate to="/" />;
  }
  
  return children;
};

const AppRoutes = () => {
  return (
    <Routes>
      {/* Public landing page */}
      <Route path="/welcome" element={<Welcome />} />
      
      {/* Public routes */}
      <Route element={<MainLayout />}>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/readers" element={<Readers />} />
        <Route path="/live" element={<Live />} />
        <Route path="/shop/*" element={<Shop />} />
        <Route path="/community" element={<Community />} />
        <Route path="/help" element={<HelpCenter />} />
        <Route path="/policies" element={<Policies />} />
        <Route path="/apply" element={<ApplyReader />} />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        
        {/* Protected routes */}
        <Route 
          path="/messages" 
          element={
            <ProtectedRoute>
              <Messages />
            </ProtectedRoute>
          } 
        />
        
        {/* Role-specific dashboards */}
        <Route 
          path="/admin/*" 
          element={
            <ProtectedRoute allowedRoles={['admin']}>
              <AdminDashboard />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/reader/*" 
          element={
            <ProtectedRoute allowedRoles={['reader']}>
              <ReaderDashboard />
            </ProtectedRoute>
          } 
        />
        <Route 
          path="/dashboard" 
          element={
            <ProtectedRoute allowedRoles={['client', 'reader', 'admin']}>
              <ClientDashboard />
            </ProtectedRoute>
          } 
        />
      </Route>
      
      {/* Fallback redirect */}
      <Route path="*" element={<Navigate to="/" />} />
    </Routes>
  );
};

export default AppRoutes;

// MainLayout.jsx
import { Outlet } from 'react-router-dom';
import Header from './Header';
import Footer from './Footer';

const MainLayout = () => {
  return (
    <>
      <Header />
      <main className="min-h-screen py-10">
        <div className="container mx-auto">
          <Outlet />
        </div>
      </main>
      <Footer />
    </>
  );
};

export default MainLayout;

// Header.jsx
import { useState } from 'react';
import { Link, NavLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

const Header = () => {
  const { user, isAuthenticated, logout } = useAuth();
  const [menuOpen, setMenuOpen] = useState(false);
  const navigate = useNavigate();
  
  const handleLogout = () => {
    logout();
    navigate('/login');
  };
  
  return (
    <header className="header">
      <div className="container flex justify-between items-center">
        <Link to="/" className="logo flex items-center">
          <img src="/assets/images/logo.svg" alt="SoulSeer" width="40" height="40" />
          <span className="ml-2 text-xl font-bold gradient-text">SoulSeer</span>
        </Link>
        
        <button 
          className="md:hidden"
          onClick={() => setMenuOpen(!menuOpen)}
          aria-label="Toggle menu"
        >
          <span className="block w-6 h-0.5 bg-white mb-1"></span>
          <span className="block w-6 h-0.5 bg-white mb-1"></span>
          <span className="block w-6 h-0.5 bg-white"></span>
        </button>
        
        <nav className={`nav-menu ${menuOpen ? 'active' : ''}`}>
          <ul className="flex flex-col md:flex-row items-center gap-2 md:gap-4">
            <li><NavLink to="/" className="nav-link">Home</NavLink></li>
            <li><NavLink to="/about" className="nav-link">About</NavLink></li>
            <li><NavLink to="/readers" className="nav-link">Readers</NavLink></li>
            <li><NavLink to="/live" className="nav-link">Live</NavLink></li>
            <li><NavLink to="/shop" className="nav-link">Shop</NavLink></li>
            <li><NavLink to="/community" className="nav-link">Community</NavLink></li>
            
            {isAuthenticated ? (
              <>
                <li><NavLink to="/messages" className="nav-link">Messages</NavLink></li>
                {user.role === 'admin' && (
                  <li><NavLink to="/admin" className="nav-link">Admin</NavLink></li>
                )}
                {user.role === 'reader' && (
                  <li><NavLink to="/reader" className="nav-link">Reader Dashboard</NavLink></li>
                )}
                <li>
                  <NavLink to="/dashboard" className="nav-link">Dashboard</NavLink>
                </li>
                <li>
                  <button onClick={handleLogout} className="btn btn-ghost">Logout</button>
                </li>
              </>
            ) : (
              <>
                <li><NavLink to="/login" className="btn btn-primary">Login</NavLink></li>
                <li><NavLink to="/register" className="btn btn-ghost">Register</NavLink></li>
              </>
            )}
          </ul>
        </nav>
      </div>
    </header>
  );
};

export default Header;

// AuthContext.jsx
import { createContext, useState, useEffect } from 'react';
import api from '../services/api';
import { jwtDecode } from 'jwt-decode';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Check if user is already logged in
    const checkAuth = async () => {
      const token = localStorage.getItem('token');
      
      if (token) {
        try {
          // Verify token validity
          const decodedToken = jwtDecode(token);
          const currentTime = Date.now() / 1000;
          
          if (decodedToken.exp < currentTime) {
            // Token expired
            localStorage.removeItem('token');
            setIsAuthenticated(false);
            setUser(null);
          } else {
            // Set auth header
            api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            
            // Get user data
            const response = await api.get('/auth/me');
            setUser(response.data);
            setIsAuthenticated(true);
          }
        } catch (err) {
          console.error('Auth error:', err);
          localStorage.removeItem('token');
          setError(err.message);
        }
      }
      
      setIsLoading(false);
    };
    
    checkAuth();
  }, []);

  const login = async (email, password) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await api.post('/auth/login', { email, password });
      const { token, user } = response.data;
      
      // Store token
      localStorage.setItem('token', token);
      
      // Set auth header
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      
      setUser(user);
      setIsAuthenticated(true);
      
      return user;
    } catch (err) {
      setError(err.response?.data?.message || 'Login failed');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (userData) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await api.post('/auth/register', userData);
      const { token, user } = response.data;
      
      // Store token
      localStorage.setItem('token', token);
      
      // Set auth header
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      
      setUser(user);
      setIsAuthenticated(true);
      
      return user;
    } catch (err) {
      setError(err.response?.data?.message || 'Registration failed');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    api.defaults.headers.common['Authorization'] = '';
    setUser(null);
    setIsAuthenticated(false);
  };

  const updateProfile = async (profileData) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await api.put('/auth/profile', profileData);
      setUser(response.data);
      return response.data;
    } catch (err) {
      setError(err.response?.data?.message || 'Profile update failed');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated,
        isLoading,
        error,
        login,
        register,
        logout,
        updateProfile,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

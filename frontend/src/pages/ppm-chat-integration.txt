// frontend/src/components/sessions/PPMChatSession.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import api from '../../services/api';
import { formatCurrency } from '../../utils/formatters';
import { ChatSession } from '../chat/ChatSession';
import Timer from '../shared/Timer';
import './PPMChatSession.css';

const PPMChatSession = () => {
  const { sessionId } = useParams();
  const { user } = useAuth();
  const navigate = useNavigate();
  
  const [session, setSession] = useState(null);
  const [recipientInfo, setRecipientInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [sessionActive, setSessionActive] = useState(false);
  const [sessionEnded, setSessionEnded] = useState(false);
  const [elapsedTime, setElapsedTime] = useState(0);
  const [clientBalance, setClientBalance] = useState(0);
  const [remainingTime, setRemainingTime] = useState(0);
  const [freeMessageMode, setFreeMessageMode] = useState(false);
  
  // Determine if user is reader or client
  const isReader = user?.role === 'reader';
  const isClient = user?.role === 'client';
  
  // Fetch session data and initialize
  useEffect(() => {
    const fetchSessionData = async () => {
      try {
        setLoading(true);
        
        // Get session details
        const sessionResponse = await api.get(`/api/sessions/${sessionId}`);
        const sessionData = sessionResponse.data.data;
        setSession(sessionData);
        
        // Determine recipient
        const recipientId = isReader ? sessionData.client._id : sessionData.reader._id;
        const recipientData = isReader ? sessionData.client : sessionData.reader;
        setRecipientInfo(recipientData);
        
        // If session is already active, update UI
        if (sessionData.status === 'in_progress') {
          setSessionActive(true);
          
          // Calculate elapsed time
          const startTime = new Date(sessionData.startTime);
          const now = new Date();
          const diffSeconds = Math.floor((now - startTime) / 1000);
          setElapsedTime(diffSeconds);
        } else if (['completed', 'cancelled', 'insufficient_funds'].includes(sessionData.status)) {
          setSessionEnded(true);
        }
        
        // For clients, fetch balance and calculate remaining time
        if (isClient) {
          const balanceResponse = await api.get('/api/client/balance');
          const balance = balanceResponse.data.balance;
          setClientBalance(balance);
          
          // Calculate remaining time based on rate
          const remainingMinutes = balance / sessionData.ratePerMinute;
          setRemainingTime(Math.floor(remainingMinutes * 60));
        }
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching session data:', err);
        setError('Failed to load session data. Please try again.');
        setLoading(false);
      }
    };
    
    fetchSessionData();
  }, [sessionId, isReader, isClient]);
  
  // Update remaining time based on elapsed time
  useEffect(() => {
    if (sessionActive && isClient && !freeMessageMode) {
      const newRemainingTime = Math.max(0, remainingTime - 1);
      setRemainingTime(newRemainingTime);
      
      // Check if time is running out
      if (newRemainingTime <= 60 && newRemainingTime % 15 === 0) {
        alert(`Warning: You have approximately ${Math.ceil(newRemainingTime / 60)} minute(s) remaining.`);
      }
      
      // End session if out of time
      if (newRemainingTime <= 0) {
        handleEndSession('balance_depleted');
      }
    }
  }, [elapsedTime, isClient, remainingTime, sessionActive, freeMessageMode]);
  
  // Start the session
  const startSession = async () => {
    try {
      if (session.status !== 'scheduled') {
        setError('Session is not in a startable state');
        return;
      }
      
      // Readers can start the session
      if (isReader) {
        await api.post(`/api/sessions/${sessionId}/start`);
        setSessionActive(true);
        setElapsedTime(0);
      }
    } catch (err) {
      console.error('Error starting session:', err);
      setError('Failed to start session. Please try again.');
    }
  };
  
  // End the session
  const handleEndSession = async (reason = 'user_ended') => {
    try {
      await api.post(`/api/sessions/${sessionId}/end`, { reason });
      setSessionActive(false);
      setSessionEnded(true);
      
      // Navigate to summary after delay
      setTimeout(() => {
        navigate(`/session-summary/${sessionId}`);
      }, 2000);
    } catch (err) {
      console.error('Error ending session:', err);
      setError('Failed to end session. Please try again.');
    }
  };
  
  // Toggle free message mode (reader only)
  const toggleFreeMessageMode = () => {
    if (isReader) {
      setFreeMessageMode(!freeMessageMode);
    }
  };
  
  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>Loading session...</p>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="error-container">
        <p className="error-message">{error}</p>
        <button 
          onClick={() => window.location.reload()} 
          className="btn btn-primary"
        >
          Retry
        </button>
      </div>
    );
  }
  
  if (!session) return null;
  
  return (
    <div className="ppm-chat-session-container">
      <div className="chat-header">
        <div className="recipient-info">
          {recipientInfo && (
            <>
              <img 
                src={recipientInfo.avatar || '/assets/default-avatar.jpg'} 
                alt={recipientInfo.username} 
                className="avatar"
              />
              <div className="user-details">
                <span className="user-name">{recipientInfo.username}</span>
                {isClient && (
                  <span className="rate-info">${session.ratePerMinute}/min</span>
                )}
              </div>
            </>
          )}
        </div>
        
        <div className="session-controls">
          <div className="timer-container">
            <Timer
              isActive={sessionActive && !freeMessageMode}
              elapsedTime={elapsedTime}
              setElapsedTime={setElapsedTime}
            />
            
            {isClient && (
              <div className="remaining-balance">
                <span>Balance: {formatCurrency(clientBalance)}</span>
                <span className="remaining-time">
                  Remaining: {Math.floor(remainingTime / 60)}:{String(remainingTime % 60).padStart(2, '0')}
                </span>
              </div>
            )}
            
            {isReader && sessionActive && (
              <div className="message-mode-toggle">
                <button
                  className={`toggle-button ${freeMessageMode ? 'free-mode' : 'paid-mode'}`}
                  onClick={toggleFreeMessageMode}
                >
                  {freeMessageMode ? 'Free Messages' : 'Paid Messages'}
                </button>
              </div>
            )}
          </div>
          
          {isReader && !sessionActive && !sessionEnded && (
            <button 
              className="start-session-btn btn btn-primary"
              onClick={startSession}
            >
              Start Session
            </button>
          )}
          
          {sessionActive && (
            <button 
              className="end-session-btn btn btn-accent"
              onClick={() => handleEndSession()}
            >
              End Session
            </button>
          )}
        </div>
      </div>
      
      <div className="chat-content">
        <ChatSession 
          sessionId={sessionId}
          recipientId={recipientInfo?._id}
          isActive={sessionActive}
          isEnded={sessionEnded}
          freeMessageMode={freeMessageMode}
        />
      </div>
      
      {sessionEnded && (
        <div className="session-ended-overlay">
          <div className="session-ended-message">
            <h3>Session Ended</h3>
            <p>Redirecting to summary...</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default PPMChatSession;

// client/src/components/Messages/MessagesPage.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { 
  Box, 
  Typography, 
  Divider, 
  List, 
  ListItem, 
  ListItemAvatar, 
  Avatar, 
  ListItemText, 
  TextField, 
  Button, 
  Container, 
  Grid, 
  Paper, 
  IconButton,
  CircularProgress,
  Snackbar,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  FormControlLabel,
  Switch,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  InputAdornment
} from '@mui/material';
import { 
  Send as SendIcon, 
  AttachFile as AttachFileIcon,
  ArrowBack as ArrowBackIcon,
  MoreVert as MoreVertIcon,
  Payment as PaymentIcon
} from '@mui/icons-material';
import { format } from 'date-fns';
import { fetchConversations, setCurrentConversation } from '../../redux/actions/conversationActions';
import { 
  fetchMessages, 
  sendMessage, 
  processMessagePayment 
} from '../../redux/actions/messageActions';
import { clearErrors } from '../../redux/actions/errorActions';
import MessageItem from './MessageItem';
import ConversationList from './ConversationList';
import PaymentMethodsDialog from './PaymentMethodsDialog';

const MessagesPage = () => {
  const dispatch = useDispatch();
  const messagesEndRef = useRef(null);
  
  // Redux state
  const { user, isAuthenticated } = useSelector(state => state.auth);
  const { conversations, currentConversation, loading: conversationsLoading } = useSelector(state => state.conversations);
  const { messages, loading: messagesLoading } = useSelector(state => state.messages);
  const { message: errorMessage } = useSelector(state => state.errors);
  
  // Component state
  const [messageContent, setMessageContent] = useState('');
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [showConversations, setShowConversations] = useState(true);
  const [requiresPayment, setRequiresPayment] = useState(false);
  const [pricePerReply, setPricePerReply] = useState(1.00);
  const [alertOpen, setAlertOpen] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSeverity, setAlertSeverity] = useState('info');
  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);
  const [selectedMessage, setSelectedMessage] = useState(null);
  
  // Fetch conversations on component mount
  useEffect(() => {
    if (isAuthenticated) {
      dispatch(fetchConversations());
    }
  }, [dispatch, isAuthenticated]);
  
  // Fetch messages when conversation changes
  useEffect(() => {
    if (currentConversation) {
      dispatch(fetchMessages(currentConversation._id));
      if (isMobile) {
        setShowConversations(false);
      }
    }
  }, [dispatch, currentConversation, isMobile]);
  
  // Scroll to bottom when messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);
  
  // Handle window resize
  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Handle alert for errors
  useEffect(() => {
    if (errorMessage) {
      setAlertMessage(errorMessage);
      setAlertSeverity('error');
      setAlertOpen(true);
      
      // Clear error after showing alert
      setTimeout(() => {
        dispatch(clearErrors());
      }, 3000);
    }
  }, [errorMessage, dispatch]);
  
  const handleSendMessage = (e) => {
    e.preventDefault();
    
    if (!messageContent.trim()) return;
    
    if (currentConversation) {
      dispatch(sendMessage({
        content: messageContent,
        conversationId: currentConversation._id,
        requiresPayment,
        pricePerReply: requiresPayment ? pricePerReply : 0
      }));
      
      setMessageContent('');
      setRequiresPayment(false);
    }
  };
  
  const handleBackClick = () => {
    setShowConversations(true);
  };
  
  const handleConversationSelect = (conversation) => {
    dispatch(setCurrentConversation(conversation));
    if (isMobile) {
      setShowConversations(false);
    }
  };
  
  const handlePaymentRequired = (message) => {
    setSelectedMessage(message);
    setPaymentDialogOpen(true);
  };
  
  const handlePaymentProcess = (paymentMethod) => {
    if (selectedMessage) {
      dispatch(processMessagePayment(selectedMessage._id, paymentMethod));
      setPaymentDialogOpen(false);
      setSelectedMessage(null);
    }
  };
  
  const handleAlertClose = () => {
    setAlertOpen(false);
  };
  
  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Paper elevation={3} sx={{ p: 0, height: 'calc(100vh - 130px)', overflow: 'hidden' }}>
        <Grid container sx={{ height: '100%' }}>
          {/* Conversations List */}
          {(!isMobile || showConversations) && (
            <Grid item xs={12} md={4} sx={{ 
              borderRight: '1px solid rgba(0, 0, 0, 0.12)', 
              height: '100%',
              display: 'flex',
              flexDirection: 'column'
            }}>
              <Typography variant="h6" sx={{ p: 2, borderBottom: '1px solid rgba(0, 0, 0, 0.12)' }}>
                Messages
              </Typography>
              
              {conversationsLoading ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
                  <CircularProgress />
                </Box>
              ) : (
                <ConversationList 
                  conversations={conversations} 
                  currentConversation={currentConversation}
                  onSelect={handleConversationSelect}
                />
              )}
            </Grid>
          )}
          
          {/* Messages */}
          {(!isMobile || !showConversations) && (
            <Grid item xs={12} md={8} sx={{ 
              height: '100%',
              display: 'flex',
              flexDirection: 'column'
            }}>
              {currentConversation ? (
                <>
                  {/* Message Header */}
                  <Box sx={{ 
                    p: 2, 
                    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',
                    display: 'flex',
                    alignItems: 'center'
                  }}>
                    {isMobile && (
                      <IconButton edge="start" onClick={handleBackClick} sx={{ mr: 1 }}>
                        <ArrowBackIcon />
                      </IconButton>
                    )}
                    
                    {currentConversation.participants.map(p => 
                      p._id !== user._id && (
                        <Box key={p._id} sx={{ display: 'flex', alignItems: 'center' }}>
                          <Avatar 
                            src={p.avatar} 
                            alt={p.username}
                            sx={{ mr: 1 }}
                          />
                          <Typography variant="subtitle1">
                            {p.username}
                          </Typography>
                        </Box>
                      )
                    )}
                    
                    <Box sx={{ flexGrow: 1 }} />
                    
                    <IconButton>
                      <MoreVertIcon />
                    </IconButton>
                  </Box>
                  
                  {/* Message List */}
                  <Box sx={{ 
                    flexGrow: 1, 
                    overflow: 'auto',
                    p: 2,
                    display: 'flex',
                    flexDirection: 'column'
                  }}>
                    {messagesLoading ? (
                      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
                        <CircularProgress />
                      </Box>
                    ) : messages.length === 0 ? (
                      <Box sx={{ 
                        display: 'flex', 
                        justifyContent: 'center', 
                        alignItems: 'center', 
                        height: '100%',
                        color: 'text.secondary'
                      }}>
                        <Typography variant="body1">
                          Start a conversation by sending a message.
                        </Typography>
                      </Box>
                    ) : (
                      messages.map(message => (
                        <MessageItem 
                          key={message._id} 
                          message={message}
                          currentUser={user}
                          onPaymentRequired={handlePaymentRequired}
                        />
                      ))
                    )}
                    <div ref={messagesEndRef} />
                  </Box>
                  
                  {/* Message Input */}
                  <Box sx={{ 
                    p: 2, 
                    borderTop: '1px solid rgba(0, 0, 0, 0.12)',
                    backgroundColor: 'background.paper'
                  }}>
                    <form onSubmit={handleSendMessage}>
                      <Grid container spacing={1} alignItems="flex-end">
                        <Grid item xs={12} sx={{ mb: 1 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
                            <FormControlLabel
                              control={
                                <Switch
                                  checked={requiresPayment}
                                  onChange={(e) => setRequiresPayment(e.target.checked)}
                                  color="primary"
                                />
                              }
                              label="Paid Reply"
                            />
                            
                            {requiresPayment && (
                              <FormControl variant="outlined" size="small" sx={{ ml: 2, width: 150 }}>
                                <InputLabel>Price</InputLabel>
                                <Select
                                  value={pricePerReply}
                                  onChange={(e) => setPricePerReply(e.target.value)}
                                  label="Price"
                                  startAdornment={<InputAdornment position="start">$</InputAdornment>}
                                >
                                  <MenuItem value={1.00}>$1.00</MenuItem>
                                  <MenuItem value={2.00}>$2.00</MenuItem>
                                  <MenuItem value={5.00}>$5.00</MenuItem>
                                  <MenuItem value={10.00}>$10.00</MenuItem>
                                  <MenuItem value={20.00}>$20.00</MenuItem>
                                </Select>
                              </FormControl>
                            )}
                            
                            {requiresPayment && (
                              <Box 
                                sx={{ 
                                  ml: 2,
                                  display: 'flex',
                                  alignItems: 'center',
                                  color: 'primary.main'
                                }}
                              >
                                <PaymentIcon fontSize="small" sx={{ mr: 0.5 }} />
                                <Typography variant="body2">
                                  Recipient will pay ${pricePerReply.toFixed(2)} to reply
                                </Typography>
                              </Box>
                            )}
                          </Box>
                        </Grid>
                        <Grid item xs>
                          <TextField
                            fullWidth
                            placeholder="Type a message..."
                            variant="outlined"
                            value={messageContent}
                            onChange={(e) => setMessageContent(e.target.value)}
                            InputProps={{
                              endAdornment: (
                                <InputAdornment position="end">
                                  <IconButton edge="end">
                                    <AttachFileIcon />
                                  </IconButton>
                                </InputAdornment>
                              )
                            }}
                          />
                        </Grid>
                        <Grid item>
                          <Button
                            type="submit"
                            variant="contained"
                            color="primary"
                            endIcon={<SendIcon />}
                            disabled={!messageContent.trim()}
                          >
                            Send
                          </Button>
                        </Grid>
                      </Grid>
                    </form>
                  </Box>
                </>
              ) : (
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'center', 
                  alignItems: 'center', 
                  height: '100%',
                  color: 'text.secondary'
                }}>
                  <Typography variant="body1">
                    Select a conversation to start messaging.
                  </Typography>
                </Box>
              )}
            </Grid>
          )}
        </Grid>
      </Paper>
      
      {/* Alert Snackbar */}
      <Snackbar
        open={alertOpen}
        autoHideDuration={6000}
        onClose={handleAlertClose}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleAlertClose} severity={alertSeverity} sx={{ width: '100%' }}>
          {alertMessage}
        </Alert>
      </Snackbar>
      
      {/* Payment Methods Dialog */}
      <PaymentMethodsDialog
        open={paymentDialogOpen}
        onClose={() => setPaymentDialogOpen(false)}
        onPaymentProcess={handlePaymentProcess}
        message={selectedMessage}
      />
    </Container>
  );
};

export default MessagesPage;

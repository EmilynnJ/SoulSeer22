// client/src/pages/Cart.jsx
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Container,
  Typography,
  Paper,
  Grid,
  Button,
  IconButton,
  Divider,
  TextField,
  Alert,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Stepper,
  Step,
  StepLabel,
  Card,
  CardContent,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  ListItemSecondaryAction,
  Chip
} from '@mui/material';
import {
  Delete as DeleteIcon,
  ShoppingCart as ShoppingCartIcon,
  Add as AddIcon,
  Remove as RemoveIcon,
  KeyboardArrowRight as KeyboardArrowRightIcon,
  CloudDownload as CloudDownloadIcon,
  LocalShipping as LocalShippingIcon,
  Schedule as ScheduleIcon
} from '@mui/icons-material';
import { 
  removeFromCart, 
  updateCartItem, 
  clearCart 
} from '../redux/actions/cartActions';
import { createOrder } from '../redux/actions/orderActions';
import { formatCurrency } from '../utils/formatters';
import ShippingForm from '../components/Shop/ShippingForm';
import PaymentMethodSelector from '../components/Shop/PaymentMethodSelector';
import OrderSummary from '../components/Shop/OrderSummary';

// Define checkout steps
const steps = ['Shopping Cart', 'Shipping Information', 'Payment', 'Review Order'];

const Cart = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  
  // Redux state
  const { items: cartItems, loading: cartLoading } = useSelector(state => state.cart);
  const { user, isAuthenticated } = useSelector(state => state.auth);
  const { loading: orderLoading, error: orderError } = useSelector(state => state.orders);
  
  // Component state
  const [activeStep, setActiveStep] = useState(0);
  const [shippingInfo, setShippingInfo] = useState({
    name: user?.fullName || '',
    email: user?.email || '',
    phone: '',
    address: {
      street: '',
      city: '',
      state: '',
      zip: '',
      country: ''
    },
    notes: ''
  });
  const [paymentMethod, setPaymentMethod] = useState('stripe');
  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);
  const [checkoutError, setCheckoutError] = useState('');
  
  // Calculate cart totals
  const subtotal = cartItems.reduce((total, item) => {
    const price = item.product.discountPrice || item.product.price;
    return total + (price * item.quantity);
  }, 0);
  
  // Determine if cart has physical products
  const hasPhysicalProducts = cartItems.some(item => item.product.type === 'physical');
  
  // Handle quantity change
  const handleQuantityChange = (productId, newQuantity) => {
    if (newQuantity >= 1) {
      dispatch(updateCartItem(productId, newQuantity));
    }
  };
  
  // Handle remove item
  const handleRemoveItem = (productId) => {
    dispatch(removeFromCart(productId));
  };
  
  // Handle quantity increase
  const handleIncreaseQuantity = (item) => {
    const newQuantity = item.quantity + 1;
    // Check if new quantity exceeds stock for physical products
    if (item.product.type === 'physical' && item.product.stock !== null) {
      if (newQuantity <= item.product.stock) {
        dispatch(updateCartItem(item.product._id, newQuantity));
      }
    } else {
      dispatch(updateCartItem(item.product._id, newQuantity));
    }
  };
  
  // Handle quantity decrease
  const handleDecreaseQuantity = (item) => {
    if (item.quantity > 1) {
      dispatch(updateCartItem(item.product._id, item.quantity - 1));
    }
  };
  
  // Handle continue shopping
  const handleContinueShopping = () => {
    navigate('/shop');
  };
  
  // Handle next step
  const handleNext = () => {
    // Validation for shipping step
    if (activeStep === 1 && hasPhysicalProducts) {
      // Simple validation
      const { name, email, phone, address } = shippingInfo;
      if (!name || !email || !phone || !address.street || !address.city || 
          !address.state || !address.zip || !address.country) {
        setCheckoutError('Please fill in all required shipping information.');
        return;
      }
    }
    
    setCheckoutError('');
    setActiveStep((prevStep) => prevStep + 1);
  };
  
  // Handle back step
  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };
  
  // Handle shipping info change
  const handleShippingInfoChange = (e) => {
    const { name, value } = e.target;
    
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      setShippingInfo(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }));
    } else {
      setShippingInfo(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };
  
  // Handle payment method change
  const handlePaymentMethodChange = (e) => {
    setPaymentMethod(e.target.value);
  };
  
  // Handle place order
  const handlePlaceOrder = () => {
    if (!isAuthenticated) {
      navigate('/login', { state: { from: '/cart' } });
      return;
    }
    
    // Open confirmation dialog
    setConfirmDialogOpen(true);
  };
  
  // Handle confirm order
  const handleConfirmOrder = async () => {
    setConfirmDialogOpen(false);
    
    try {
      // Prepare order items
      const orderItems = cartItems.map(item => ({
        productId: item.product._id,
        quantity: item.quantity
      }));
      
      // Create order payload
      const orderData = {
        items: orderItems,
        paymentMethod,
        ...(hasPhysicalProducts && { shipping: shippingInfo })
      };
      
      // Dispatch create order action
      const result = await dispatch(createOrder(orderData));
      
      if (result && result.success) {
        // Clear cart
        dispatch(clearCart());
        
        // If Stripe payment, redirect to checkout URL
        if (paymentMethod === 'stripe' && result.data.paymentUrl) {
          window.location.href = result.data.paymentUrl;
        } else {
          // Otherwise, redirect to order success page
          navigate('/orders?success=true');
        }
      }
    } catch (error) {
      console.error('Error creating order:', error);
      setCheckoutError(error.message || 'Failed to create order. Please try again.');
    }
  };
  
  // Generate cart item content
  const renderCartItems = (condensed = false) => {
    if (cartItems.length === 0) {
      return (
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            py: 8
          }}
        >
          <ShoppingCartIcon sx={{ fontSize: 60, color: 'text.secondary', mb: 2 }} />
          <Typography variant="h5" color="white" gutterBottom>
            Your cart is empty
          </Typography>
          <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
            Add some items to your cart to continue shopping.
          </Typography>
          <Button
            variant="contained"
            color="primary"
            onClick={handleContinueShopping}
          >
            Continue Shopping
          </Button>
        </Box>
      );
    }
    
    if (condensed) {
      return (
        <List sx={{ width: '100%' }}>
          {cartItems.map((item) => (
            <ListItem key={item.product._id} sx={{ py: 1 }}>
              <ListItemAvatar>
                <Avatar
                  src={item.product.images?.[0]?.url || '/images/product-placeholder.jpg'}
                  alt={item.product.name}
                  variant="rounded"
                />
              </ListItemAvatar>
              <ListItemText
                primary={item.product.name}
                secondary={`${item.quantity} Ã— ${formatCurrency(item.product.discountPrice || item.product.price)}`}
                primaryTypographyProps={{ color: 'white' }}
              />
              <ListItemSecondaryAction>
                <Typography color="primary.light" variant="body2">
                  {formatCurrency((item.product.discountPrice || item.product.price) * item.quantity)}
                </Typography>
              </ListItemSecondaryAction>
            </ListItem>
          ))}
        </List>
      );
    }
    
    return cartItems.map((item) => (
      <Box key={item.product._id} sx={{ mb: 3 }}>
        <Grid container spacing={2}>
          {/* Product Image */}
          <Grid item xs={3} sm={2}>
            <Box
              sx={{
                width: '100%',
                paddingTop: '100%',
                position: 'relative',
                overflow: 'hidden',
                borderRadius: 1
              }}
            >
              <Box
                component="img"
                src={item.product.images?.[0]?.url || '/images/product-placeholder.jpg'}
                alt={item.product.name}
                sx={{
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  width: '100%',
                  height: '100%',
                  objectFit: 'cover'
                }}
              />
            </Box>
          </Grid>
          
          {/* Product Info */}
          <Grid item xs={9} sm={10}>
            <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Box>
                  {/* Product Type */}
                  <Chip
                    icon={
                      item.product.type === 'digital' ? <CloudDownloadIcon fontSize="small" /> :
                      item.product.type === 'physical' ? <LocalShippingIcon fontSize="small" /> :
                      <ScheduleIcon fontSize="small" />
                    }
                    label={item.product.type.charAt(0).toUpperCase() + item.product.type.slice(1)}
                    size="small"
                    sx={{ mb: 1 }}
                    color={
                      item.product.type === 'digital' ? 'info' :
                      item.product.type === 'physical' ? 'warning' :
                      'success'
                    }
                  />
                  
                  {/* Product Name */}
                  <Typography variant="h6" color="white">
                    {item.product.name}
                  </Typography>
                  
                  {/* Product Creator */}
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    by {item.product.author.username}
                  </Typography>
                  
                  {/* Stock Info for Physical Products */}
                  {item.product.type === 'physical' && item.product.stock !== null && (
                    <Typography variant="body2" color="text.secondary">
                      {item.product.stock > 0 
                        ? `In Stock (${item.product.stock} available)` 
                        : 'Out of Stock'}
                    </Typography>
                  )}
                </Box>
                
                {/* Remove Button */}
                <IconButton 
                  onClick={() => handleRemoveItem(item.product._id)}
                  sx={{ color: 'error.light' }}
                >
                  <DeleteIcon />
                </IconButton>
              </Box>
              
              <Box sx={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'flex-end',
                mt: 'auto'
              }}>
                {/* Quantity Selector */}
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <IconButton 
                    size="small" 
                    onClick={() => handleDecreaseQuantity(item)}
                    disabled={item.quantity <= 1}
                    sx={{ color: 'white' }}
                  >
                    <RemoveIcon fontSize="small" />
                  </IconButton>
                  <TextField
                    value={item.quantity}
                    onChange={(e) => {
                      const newValue = parseInt(e.target.value);
                      if (!isNaN(newValue)) {
                        handleQuantityChange(item.product._id, newValue);
                      }
                    }}
                    inputProps={{ 
                      min: 1, 
                      style: { textAlign: 'center' },
                      'aria-label': 'quantity'
                    }}
                    sx={{ 
                      width: 60, 
                      '& .MuiInputBase-input': { 
                        color: 'white', 
                        textAlign: 'center'
                      }
                    }}
                    variant="outlined"
                    size="small"
                  />
                  <IconButton 
                    size="small" 
                    onClick={() => handleIncreaseQuantity(item)}
                    disabled={
                      item.product.type === 'physical' && 
                      item.product.stock !== null && 
                      item.quantity >= item.product.stock
                    }
                    sx={{ color: 'white' }}
                  >
                    <AddIcon fontSize="small" />
                  </IconButton>
                </Box>
                
                {/* Price Info */}
                <Box sx={{ textAlign: 'right' }}>
                  <Typography variant="body2" color="text.secondary">
                    {formatCurrency(item.product.discountPrice || item.product.price)} Ã— {item.quantity}
                  </Typography>
                  <Typography variant="h6" color="primary.light">
                    {formatCurrency((item.product.discountPrice || item.product.price) * item.quantity)}
                  </Typography>
                </Box>
              </Box>
            </Box>
          </Grid>
        </Grid>
        <Divider sx={{ my: 2, backgroundColor: 'rgba(255, 255, 255, 0.1)' }} />
      </Box>
    ));
  };
  
  // Render different content based on active step
  const getStepContent = (step) => {
    switch (step) {
      case 0: // Cart
        return (
          <Box>
            {renderCartItems()}
          </Box>
        );
      case 1: // Shipping
        return (
          <ShippingForm 
            shippingInfo={shippingInfo}
            onChange={handleShippingInfoChange}
            hasPhysicalProducts={hasPhysicalProducts}
          />
        );
      case 2: // Payment
        return (
          <PaymentMethodSelector
            paymentMethod={paymentMethod}
            onChange={handlePaymentMethodChange}
            total={subtotal}
          />
        );
      case 3: // Review
        return (
          <Box>
            <Grid container spacing={3}>
              {/* Order Items */}
              <Grid item xs={12} md={8}>
                <Typography variant="h6" color="white" gutterBottom>
                  Order Items
                </Typography>
                <Card sx={{ 
                  backgroundColor: 'rgba(0, 0, 0, 0.5)',
                  marginBottom: 2
                }}>
                  <CardContent>
                    {renderCartItems(true)}
                  </CardContent>
                </Card>
                
                {/* Shipping Info */}
                {hasPhysicalProducts && (
                  <>
                    <Typography variant="h6" color="white" gutterBottom>
                      Shipping Information
                    </Typography>
                    <Card sx={{ 
                      backgroundColor: 'rgba(0, 0, 0, 0.5)',
                      marginBottom: 2
                    }}>
                      <CardContent>
                        <Grid container spacing={2}>
                          <Grid item xs={12} sm={6}>
                            <Typography variant="body2" color="text.secondary">
                              Name
                            </Typography>
                            <Typography variant="body1" color="white">
                              {shippingInfo.name}
                            </Typography>
                          </Grid>
                          <Grid item xs={12} sm={6}>
                            <Typography variant="body2" color="text.secondary">
                              Email
                            </Typography>
                            <Typography variant="body1" color="white">
                              {shippingInfo.email}
                            </Typography>
                          </Grid>
                          <Grid item xs={12} sm={6}>
                            <Typography variant="body2" color="text.secondary">
                              Phone
                            </Typography>
                            <Typography variant="body1" color="white">
                              {shippingInfo.phone}
                            </Typography>
                          </Grid>
                          <Grid item xs={12}>
                            <Typography variant="body2" color="text.secondary">
                              Address
                            </Typography>
                            <Typography variant="body1" color="white">
                              {shippingInfo.address.street}, {shippingInfo.address.city}, {shippingInfo.address.state} {shippingInfo.address.zip}, {shippingInfo.address.country}
                            </Typography>
                          </Grid>
                          {shippingInfo.notes && (
                            <Grid item xs={12}>
                              <Typography variant="body2" color="text.secondary">
                                Notes
                              </Typography>
                              <Typography variant="body1" color="white">
                                {shippingInfo.notes}
                              </Typography>
                            </Grid>
                          )}
                        </Grid>
                      </CardContent>
                    </Card>
                  </>
                )}
                
                {/* Payment Method */}
                <Typography variant="h6" color="white" gutterBottom>
                  Payment Method
                </Typography>
                <Card sx={{ backgroundColor: 'rgba(0, 0, 0, 0.5)' }}>
                  <CardContent>
                    <Typography variant="body1" color="white">
                      {paymentMethod === 'stripe' ? 'Credit/Debit Card (Stripe)' : 
                       paymentMethod === 'wallet' ? 'Wallet Balance' : 
                       'Account Credits'}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              
              {/* Order Summary */}
              <Grid item xs={12} md={4}>
                <OrderSummary
                  subtotal={subtotal}
                  shipping={0}
                  tax={0}
                  total={subtotal}
                  onPlaceOrder={handlePlaceOrder}
                  loading={orderLoading}
                />
              </Grid>
            </Grid>
          </Box>
        );
      default:
        return 'Unknown step';
    }
  };
  
  return (
    <Box sx={{ 
      minHeight: 'calc(100vh - 64px)',
      background: 'linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.5))',
      py: 4
    }}>
      <Container maxWidth="lg">
        <Typography 
          variant="h3" 
          textAlign="center" 
          color="primary.light"
          sx={{ 
            mb: 1,
            fontWeight: 300,
            textShadow: '0 0 10px rgba(255, 192, 203, 0.7)'
          }}
        >
          {activeStep === 0 ? 'Your Shopping Cart' : 'Checkout'}
        </Typography>
        
        {cartItems.length > 0 && (
          <Box sx={{ width: '100%', mb: 4 }}>
            <Stepper activeStep={activeStep} alternativeLabel>
              {steps.map((label) => (
                <Step key={label}>
                  <StepLabel>{label}</StepLabel>
                </Step>
              ))}
            </Stepper>
          </Box>
        )}
        
        {/* Error messages */}
        {(checkoutError || orderError) && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {checkoutError || orderError}
          </Alert>
        )}
        
        <Paper
          sx={{ 
            p: 3,
            backgroundColor: 'rgba(0, 0, 0, 0.7)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(255, 255, 255, 0.1)'
          }}
        >
          {/* Main content based on active step */}
          {getStepContent(activeStep)}
          
          {/* Actions */}
          {cartItems.length > 0 && (
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>
              <Button
                variant="outlined"
                onClick={activeStep === 0 ? handleContinueShopping : handleBack}
                disabled={orderLoading}
              >
                {activeStep === 0 ? 'Continue Shopping' : 'Back'}
              </Button>
              
              {activeStep < steps.length - 1 ? (
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleNext}
                  endIcon={<KeyboardArrowRightIcon />}
                  disabled={cartItems.length === 0 || orderLoading}
                >
                  Next
                </Button>
              ) : (
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handlePlaceOrder}
                  disabled={cartItems.length === 0 || orderLoading}
                >
                  {orderLoading ? (
                    <CircularProgress size={24} color="inherit" />
                  ) : (
                    'Place Order'
                  )}
                </Button>
              )}
            </Box>
          )}
        </Paper>
      </Container>
      
      {/* Confirmation Dialog */}
      <Dialog
        open={confirmDialogOpen}
        onClose={() => setConfirmDialogOpen(false)}
      >
        <DialogTitle>Confirm Your Order</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to place this order for {formatCurrency(subtotal)}?
            {paymentMethod === 'wallet' && (
              <>
                <br />
                Your wallet balance will be charged.
              </>
            )}
            {paymentMethod === 'credits' && (
              <>
                <br />
                Your account credits will be used.
              </>
            )}
            {paymentMethod === 'stripe' && (
              <>
                <br />
                You'll be redirected to Stripe for secure payment.
              </>
            )}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleConfirmOrder} variant="contained" color="primary">
            Confirm Order
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Cart;

// client/src/components/Messages/PaymentMethodsDialog.jsx
import React, { useState } from 'react';
import { useSelector } from 'react-redux';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Button,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider,
  Typography,
  Box,
  Radio,
  RadioGroup,
  FormControlLabel,
  CircularProgress
} from '@mui/material';
import {
  CreditCard as CreditCardIcon,
  AccountBalanceWallet as WalletIcon,
  Stars as StarsIcon,
  PaymentRounded as PaymentIcon
} from '@mui/icons-material';

const PaymentMethodsDialog = ({ open, onClose, onPaymentProcess, message }) => {
  const [selectedMethod, setSelectedMethod] = useState('wallet');
  const [loading, setLoading] = useState(false);
  
  const { user } = useSelector(state => state.auth);
  
  const handlePaymentSubmit = () => {
    setLoading(true);
    onPaymentProcess(selectedMethod);
    // Loading handled by parent component with Redux state
  };
  
  if (!message) return null;
  
  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <PaymentIcon sx={{ mr: 1 }} />
          Pay to Reply
        </Box>
      </DialogTitle>
      
      <DialogContent>
        <DialogContentText>
          This message requires a payment of ${message?.pricePerReply?.toFixed(2)} to reply. 
          Choose your preferred payment method below.
        </DialogContentText>
        
        <Box sx={{ mt: 3 }}>
          <Typography variant="subtitle1" gutterBottom>
            From: {message?.sender?.username}
          </Typography>
          <Typography variant="body2" sx={{ mb: 2 }}>
            "{message?.content}"
          </Typography>
        </Box>
        
        <Divider sx={{ my: 2 }} />
        
        <Typography variant="subtitle1" gutterBottom>
          Select Payment Method
        </Typography>
        
        <RadioGroup
          value={selectedMethod}
          onChange={(e) => setSelectedMethod(e.target.value)}
        >
          <List sx={{ width: '100%' }}>
            <ListItem 
              button 
              selected={selectedMethod === 'wallet'} 
              onClick={() => setSelectedMethod('wallet')}
              disabled={user.walletBalance < message?.pricePerReply}
            >
              <ListItemIcon>
                <WalletIcon />
              </ListItemIcon>
              <ListItemText 
                primary="Wallet Balance" 
                secondary={`Available: $${user.walletBalance?.toFixed(2)}${user.walletBalance < message?.pricePerReply ? ' (Insufficient funds)' : ''}`} 
              />
              <FormControlLabel
                value="wallet"
                control={<Radio />}
                label=""
                sx={{ marginRight: 0 }}
              />
            </ListItem>
            
            <Divider variant="inset" component="li" />
            
            <ListItem 
              button 
              selected={selectedMethod === 'credits'} 
              onClick={() => setSelectedMethod('credits')}
              disabled={user.credits < message?.pricePerReply}
            >
              <ListItemIcon>
                <StarsIcon />
              </ListItemIcon>
              <ListItemText 
                primary="Credits" 
                secondary={`Available: ${user.credits?.toFixed(2)}${user.credits < message?.pricePerReply ? ' (Insufficient credits)' : ''}`} 
              />
              <FormControlLabel
                value="credits"
                control={<Radio />}
                label=""
                sx={{ marginRight: 0 }}
              />
            </ListItem>
            
            <Divider variant="inset" component="li" />
            
            <ListItem 
              button 
              selected={selectedMethod === 'stripe'} 
              onClick={() => setSelectedMethod('stripe')}
            >
              <ListItemIcon>
                <CreditCardIcon />
              </ListItemIcon>
              <ListItemText 
                primary="Credit/Debit Card" 
                secondary="Pay with Stripe" 
              />
              <FormControlLabel
                value="stripe"
                control={<Radio />}
                label=""
                sx={{ marginRight: 0 }}
              />
            </ListItem>
          </List>
        </RadioGroup>
      </DialogContent>
      
      <DialogActions>
        <Button onClick={onClose} disabled={loading}>
          Cancel
        </Button>
        <Button 
          onClick={handlePaymentSubmit} 
          variant="contained" 
          color="primary"
          disabled={loading || 
            (selectedMethod === 'wallet' && user.walletBalance < message?.pricePerReply) ||
            (selectedMethod === 'credits' && user.credits < message?.pricePerReply)
          }
          startIcon={loading ? <CircularProgress size={20} /> : null}
        >
          {loading ? 'Processing...' : `Pay $${message?.pricePerReply?.toFixed(2)}`}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default PaymentMethodsDialog;

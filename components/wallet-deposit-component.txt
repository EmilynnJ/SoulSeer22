// client/src/components/Wallet/WalletDeposit.jsx
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  Box,
  Typography,
  TextField,
  Button,
  Paper,
  CircularProgress,
  Alert,
  Divider,
  FormControl,
  FormControlLabel,
  Radio,
  RadioGroup,
  Stack,
  Chip
} from '@mui/material';
import {
  CardElement,
  Elements,
  useStripe,
  useElements
} from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import stripeService from '../../services/stripeService';
import { fetchUserData } from '../../redux/actions/authActions';
import { formatCurrency } from '../../utils/formatters';

// Load Stripe
const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);

// Card element options
const cardElementOptions = {
  style: {
    base: {
      color: '#fff',
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '16px',
      '::placeholder': {
        color: '#aab7c4'
      }
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a'
    }
  },
  hidePostalCode: true
};

// Preset amount options
const presetAmounts = [15, 25, 50, 100, 200];

// Inner deposit form component
const DepositForm = () => {
  const stripe = useStripe();
  const elements = useElements();
  const dispatch = useDispatch();
  
  const { user } = useSelector(state => state.auth);
  
  const [amount, setAmount] = useState(25);
  const [customAmount, setCustomAmount] = useState('');
  const [isCustom, setIsCustom] = useState(false);
  const [paymentError, setPaymentError] = useState('');
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [clientSecret, setClientSecret] = useState('');
  const [paymentMethods, setPaymentMethods] = useState([]);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('new');
  const [useExistingCard, setUseExistingCard] = useState(false);
  const [loadingPaymentMethods, setLoadingPaymentMethods] = useState(false);
  
  // Get effective amount
  const effectiveAmount = isCustom ? Number(customAmount) : amount;
  
  // Load existing payment methods
  useEffect(() => {
    const fetchPaymentMethods = async () => {
      try {
        setLoadingPaymentMethods(true);
        const methods = await stripeService.getPaymentMethods();
        setPaymentMethods(methods);
        
        // Select default payment method if available
        const defaultMethod = methods.find(m => m.isDefault);
        if (defaultMethod) {
          setSelectedPaymentMethod(defaultMethod.id);
          setUseExistingCard(true);
        }
        
        setLoadingPaymentMethods(false);
      } catch (error) {
        console.error('Error loading payment methods:', error);
        setLoadingPaymentMethods(false);
      }
    };
    
    fetchPaymentMethods();
  }, []);
  
  // Reset form after successful payment
  useEffect(() => {
    if (paymentSuccess) {
      setAmount(25);
      setCustomAmount('');
      setIsCustom(false);
      setClientSecret('');
      
      if (elements) {
        const cardElement = elements.getElement(CardElement);
        if (cardElement) {
          cardElement.clear();
        }
      }
      
      // Refresh user data to update wallet balance
      dispatch(fetchUserData());
      
      // Reset success message after 5 seconds
      const timer = setTimeout(() => {
        setPaymentSuccess(false);
      }, 5000);
      
      return () => clearTimeout(timer);
    }
  }, [paymentSuccess, elements, dispatch]);
  
  // Handle amount selection
  const handleAmountSelect = (selectedAmount) => {
    setAmount(selectedAmount);
    setIsCustom(false);
  };
  
  // Handle custom amount change
  const handleCustomAmountChange = (e) => {
    const value = e.target.value;
    // Only allow numbers and decimals
    if (/^(\d+\.?\d*|\.\d+)$/.test(value) || value === '') {
      setCustomAmount(value);
    }
  };
  
  // Handle custom amount selection
  const handleCustomSelect = () => {
    setIsCustom(true);
  };
  
  // Handle payment method selection
  const handlePaymentMethodChange = (e) => {
    setSelectedPaymentMethod(e.target.value);
    setUseExistingCard(e.target.value !== 'new');
  };
  
  // Create payment intent
  const createPaymentIntent = async () => {
    try {
      setPaymentError('');
      
      // Validate amount
      if (!effectiveAmount || effectiveAmount < 5) {
        setPaymentError('Minimum deposit amount is $5.00');
        return;
      }
      
      setProcessing(true);
      
      // Create payment intent
      const result = await stripeService.createWalletDeposit(effectiveAmount);
      setClientSecret(result.clientSecret);
      
      setProcessing(false);
    } catch (error) {
      console.error('Error creating payment intent:', error);
      setPaymentError(error.response?.data?.message || 'Failed to create payment. Please try again.');
      setProcessing(false);
    }
  };
  
  // Handle payment submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!stripe || !elements) {
      return;
    }
    
    try {
      setPaymentError('');
      setProcessing(true);
      
      if (!clientSecret) {
        await createPaymentIntent();
        setProcessing(false);
        return;
      }
      
      let paymentResult;
      
      if (useExistingCard) {
        // Use existing payment method
        paymentResult = await stripe.confirmCardPayment(clientSecret, {
          payment_method: selectedPaymentMethod
        });
      } else {
        // Use new card
        const cardElement = elements.getElement(CardElement);
        
        paymentResult = await stripe.confirmCardPayment(clientSecret, {
          payment_method: {
            card: cardElement,
            billing_details: {
              name: user.username,
              email: user.email
            }
          }
        });
      }
      
      if (paymentResult.error) {
        setPaymentError(paymentResult.error.message);
        setProcessing(false);
        return;
      }
      
      if (paymentResult.paymentIntent.status === 'succeeded') {
        setPaymentSuccess(true);
        setClientSecret('');
      } else {
        setPaymentError(`Payment status: ${paymentResult.paymentIntent.status}`);
      }
      
      setProcessing(false);
    } catch (error) {
      console.error('Error processing payment:', error);
      setPaymentError(error.message || 'Failed to process payment. Please try again.');
      setProcessing(false);
    }
  };
  
  // Format card details for display
  const formatCardDetails = (card) => {
    return `${card.brand.charAt(0).toUpperCase() + card.brand.slice(1)} •••• ${card.last4} | Expires ${card.expMonth}/${card.expYear}`;
  };
  
  return (
    <Box sx={{ maxWidth: 600, width: '100%' }}>
      <form onSubmit={handleSubmit}>
        {/* Success message */}
        {paymentSuccess && (
          <Alert severity="success" sx={{ mb: 3 }}>
            Your deposit was successful! Your wallet has been updated.
          </Alert>
        )}
        
        {/* Error message */}
        {paymentError && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {paymentError}
          </Alert>
        )}
        
        {/* Current balance */}
        <Box sx={{ mb: 4, textAlign: 'center' }}>
          <Typography variant="subtitle1" color="text.secondary">
            Current Balance
          </Typography>
          <Typography variant="h3" color="primary.light">
            {formatCurrency(user.walletBalance || 0)}
          </Typography>
        </Box>
        
        <Divider sx={{ my: 3, backgroundColor: 'rgba(255, 255, 255, 0.1)' }} />
        
        {/* Amount selection */}
        <Typography variant="h6" gutterBottom>
          Select Deposit Amount
        </Typography>
        
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 3 }}>
          {presetAmounts.map((preset) => (
            <Chip
              key={preset}
              label={`$${preset}`}
              onClick={() => handleAmountSelect(preset)}
              variant={!isCustom && amount === preset ? 'filled' : 'outlined'}
              color={!isCustom && amount === preset ? 'primary' : 'default'}
              sx={{ 
                fontSize: '1rem',
                py: 2.5,
                px: 1,
                borderColor: !isCustom && amount === preset ? 'primary.main' : 'rgba(255, 255, 255, 0.23)'
              }}
            />
          ))}
          <Chip
            label="Custom"
            onClick={handleCustomSelect}
            variant={isCustom ? 'filled' : 'outlined'}
            color={isCustom ? 'primary' : 'default'}
            sx={{ 
              fontSize: '1rem',
              py: 2.5,
              px: 1,
              borderColor: isCustom ? 'primary.main' : 'rgba(255, 255, 255, 0.23)'
            }}
          />
        </Box>
        
        {/* Custom amount input */}
        {isCustom && (
          <TextField
            label="Custom Amount"
            variant="outlined"
            fullWidth
            value={customAmount}
            onChange={handleCustomAmountChange}
            InputProps={{
              startAdornment: '$',
            }}
            helperText="Minimum $5.00"
            sx={{ mb: 3 }}
          />
        )}
        
        <Divider sx={{ my: 3, backgroundColor: 'rgba(255, 255, 255, 0.1)' }} />
        
        {/* Payment method selection */}
        <Typography variant="h6" gutterBottom>
          Payment Method
        </Typography>
        
        {loadingPaymentMethods ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', my: 2 }}>
            <CircularProgress size={24} />
          </Box>
        ) : paymentMethods.length > 0 ? (
          <FormControl component="fieldset" sx={{ width: '100%', mb: 3 }}>
            <RadioGroup
              value={selectedPaymentMethod}
              onChange={handlePaymentMethodChange}
            >
              {paymentMethods.map((method) => (
                <FormControlLabel
                  key={method.id}
                  value={method.id}
                  control={<Radio />}
                  label={formatCardDetails(method)}
                  sx={{ mb: 1 }}
                />
              ))}
              <FormControlLabel
                value="new"
                control={<Radio />}
                label="Use a new card"
                sx={{ mb: 1 }}
              />
            </RadioGroup>
          </FormControl>
        ) : null}
        
        {/* Card input */}
        {!useExistingCard && (
          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>
              Card Details
            </Typography>
            <Paper 
              variant="outlined" 
              sx={{ 
                p: 2, 
                backgroundColor: 'rgba(0, 0, 0, 0.2)',
                border: '1px solid rgba(255, 255, 255, 0.12)'
              }}
            >
              <CardElement options={cardElementOptions} />
            </Paper>
          </Box>
        )}
        
        {/* Summary */}
        <Box 
          sx={{ 
            p: 3, 
            mt: 3, 
            mb: 3, 
            backgroundColor: 'rgba(0, 0, 0, 0.3)',
            borderRadius: 1,
            border: '1px solid rgba(255, 255, 255, 0.12)'
          }}
        >
          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <Typography variant="subtitle1">Deposit Amount:</Typography>
            <Typography variant="h6" color="primary.light">
              {formatCurrency(effectiveAmount || 0)}
            </Typography>
          </Stack>
          <Divider sx={{ my: 2, backgroundColor: 'rgba(255, 255, 255, 0.1)' }} />
          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <Typography variant="subtitle1">New Balance:</Typography>
            <Typography variant="h6" color="white">
              {formatCurrency((user.walletBalance || 0) + (effectiveAmount || 0))}
            </Typography>
          </Stack>
        </Box>
        
        {/* Submit button */}
        <Button
          type="submit"
          variant="contained"
          color="primary"
          size="large"
          fullWidth
          disabled={
            processing || 
            !stripe || 
            (!effectiveAmount || effectiveAmount < 5) ||
            (isCustom && (!customAmount || parseFloat(customAmount) < 5))
          }
          sx={{ py: 1.5 }}
        >
          {processing ? (
            <CircularProgress size={24} color="inherit" />
          ) : clientSecret ? (
            'Confirm Payment'
          ) : (
            'Deposit Funds'
          )}
        </Button>
      </form>
    </Box>
  );
};

// Wrapper component with Stripe provider
const WalletDeposit = () => {
  return (
    <Elements stripe={stripePromise}>
      <Paper 
        elevation={3} 
        sx={{ 
          p: 4, 
          borderRadius: 2, 
          backgroundColor: 'rgba(0, 0, 0, 0.7)',
          backdropFilter: 'blur(10px)'
        }}
      >
        <Typography variant="h4" color="primary.light" gutterBottom>
          Deposit Funds
        </Typography>
        <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
          Add funds to your wallet to pay for reading sessions and purchases.
        </Typography>
        
        <DepositForm />
      </Paper>
    </Elements>
  );
};

export default WalletDeposit;

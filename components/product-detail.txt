// client/src/pages/ProductDetail.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import {
  Box,
  Container,
  Grid,
  Typography,
  Button,
  Chip,
  Divider,
  Avatar,
  Paper,
  CircularProgress,
  IconButton,
  TextField,
  Tabs,
  Tab,
  Rating,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Stack,
  Alert
} from '@mui/material';
import {
  ShoppingCart as ShoppingCartIcon,
  ShoppingCartCheckout as ShoppingCartCheckoutIcon,
  Favorite as FavoriteIcon,
  FavoriteBorder as FavoriteBorderIcon,
  ExpandMore as ExpandMoreIcon,
  CloudDownload as CloudDownloadIcon,
  LocalShipping as LocalShippingIcon,
  Schedule as ScheduleIcon,
  LocationOn as LocationOnIcon,
  StarBorder as StarBorderIcon,
  ArrowBack as ArrowBackIcon,
  Add as AddIcon,
  Remove as RemoveIcon
} from '@mui/icons-material';
import { 
  fetchProductById, 
  fetchRelatedProducts 
} from '../redux/actions/productActions';
import { addToCart, updateCartItem } from '../redux/actions/cartActions';
import ProductCard from '../components/Shop/ProductCard';
import { formatCurrency } from '../utils/formatters';

const ProductDetail = () => {
  const { productId } = useParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  
  // Redux state
  const { product, relatedProducts, loading } = useSelector(state => state.products);
  const { items: cartItems } = useSelector(state => state.cart);
  
  // Component state
  const [quantity, setQuantity] = useState(1);
  const [tabValue, setTabValue] = useState(0);
  const [selectedImage, setSelectedImage] = useState(0);
  
  // Fetch product details on component mount
  useEffect(() => {
    if (productId) {
      dispatch(fetchProductById(productId));
    }
  }, [dispatch, productId]);
  
  // Fetch related products when product is loaded
  useEffect(() => {
    if (product) {
      dispatch(fetchRelatedProducts(product._id, product.type, product.categories));
      
      // Reset quantity and selected image when product changes
      setQuantity(1);
      setSelectedImage(0);
    }
  }, [dispatch, product]);
  
  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Handle quantity change
  const handleQuantityChange = (event) => {
    const value = parseInt(event.target.value);
    if (!isNaN(value) && value >= 1) {
      setQuantity(value);
    }
  };
  
  // Handle quantity increase
  const handleIncreaseQuantity = () => {
    setQuantity(quantity + 1);
  };
  
  // Handle quantity decrease
  const handleDecreaseQuantity = () => {
    if (quantity > 1) {
      setQuantity(quantity - 1);
    }
  };
  
  // Handle image selection
  const handleImageSelect = (index) => {
    setSelectedImage(index);
  };
  
  // Handle add to cart
  const handleAddToCart = () => {
    if (product) {
      const cartItem = cartItems.find(item => item.product._id === product._id);
      
      if (cartItem) {
        // Update quantity if already in cart
        dispatch(updateCartItem(product._id, cartItem.quantity + quantity));
      } else {
        // Add new item to cart
        dispatch(addToCart(product, quantity));
      }
    }
  };
  
  // Handle buy now
  const handleBuyNow = () => {
    handleAddToCart();
    navigate('/cart');
  };
  
  // Check if product is in cart
  const isInCart = () => {
    return cartItems.some(item => item.product._id === product?._id);
  };
  
  // Go back to shop
  const goBackToShop = () => {
    navigate('/shop');
  };
  
  // Get current cart quantity if in cart
  const getCurrentCartQuantity = () => {
    const cartItem = cartItems.find(item => item.product._id === product?._id);
    return cartItem ? cartItem.quantity : 0;
  };
  
  if (loading) {
    return (
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center',
        height: 'calc(100vh - 64px)',
        background: 'linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.5))'
      }}>
        <CircularProgress />
      </Box>
    );
  }
  
  if (!product) {
    return (
      <Box sx={{ 
        minHeight: 'calc(100vh - 64px)',
        background: 'linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.5))',
        py: 4
      }}>
        <Container maxWidth="lg">
          <Paper 
            sx={{ 
              p: 4, 
              textAlign: 'center',
              backgroundColor: 'rgba(0, 0, 0, 0.7)',
              backdropFilter: 'blur(10px)',
              border: '1px solid rgba(255, 255, 255, 0.1)'
            }}
          >
            <Typography variant="h5" color="white" gutterBottom>
              Product Not Found
            </Typography>
            <Typography variant="body1" color="text.secondary" paragraph>
              The product you are looking for does not exist or has been removed.
            </Typography>
            <Button
              variant="contained"
              color="primary"
              startIcon={<ArrowBackIcon />}
              onClick={goBackToShop}
            >
              Back to Shop
            </Button>
          </Paper>
        </Container>
      </Box>
    );
  }
  
  // Format product price
  const formattedPrice = formatCurrency(product.price);
  const formattedDiscountPrice = product.discountPrice 
    ? formatCurrency(product.discountPrice) 
    : null;
  
  // Calculate discount percentage
  const discountPercentage = product.discountPrice 
    ? Math.round((1 - product.discountPrice / product.price) * 100) 
    : 0;
  
  // Get product type info
  const getTypeInfo = () => {
    switch (product.type) {
      case 'digital':
        return {
          icon: <CloudDownloadIcon />,
          label: 'Digital Product',
          description: 'Instant download after purchase'
        };
      case 'physical':
        return {
          icon: <LocalShippingIcon />,
          label: 'Physical Product',
          description: `Ships in ${product.shippingInfo || '3-5 business days'}`
        };
      case 'service':
        return {
          icon: <ScheduleIcon />,
          label: 'Service',
          description: `${product.duration} minutes ${product.location ? `| ${product.location}` : ''}`
        };
      default:
        return {
          icon: null,
          label: '',
          description: ''
        };
    }
  };
  
  // Get current image URL
  const currentImageUrl = product.images && product.images.length > 0
    ? product.images[selectedImage].url
    : '/images/product-placeholder.jpg';
  
  const typeInfo = getTypeInfo();
  
  return (
    <Box sx={{ 
      minHeight: 'calc(100vh - 64px)',
      background: 'linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.5))',
      py: 4
    }}>
      <Container maxWidth="lg">
        {/* Back to shop button */}
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={goBackToShop}
          sx={{ mb: 3, color: 'white' }}
        >
          Back to Shop
        </Button>
        
        <Paper 
          sx={{ 
            p: 4,
            backgroundColor: 'rgba(0, 0, 0, 0.7)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(255, 255, 255, 0.1)'
          }}
        >
          <Grid container spacing={4}>
            {/* Product Images */}
            <Grid item xs={12} md={6}>
              <Box sx={{ position: 'relative' }}>
                {/* Main image */}
                <Box
                  sx={{
                    width: '100%',
                    paddingTop: '75%',
                    position: 'relative',
                    overflow: 'hidden',
                    borderRadius: 2,
                    mb: 2
                  }}
                >
                  <Box
                    component="img"
                    src={currentImageUrl}
                    alt={product.name}
                    sx={{
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      width: '100%',
                      height: '100%',
                      objectFit: 'cover'
                    }}
                  />
                  
                  {/* Featured badge */}
                  {product.isFeatured && (
                    <Chip
                      icon={<StarBorderIcon />}
                      label="Featured"
                      color="primary"
                      sx={{
                        position: 'absolute',
                        top: 16,
                        right: 16
                      }}
                    />
                  )}
                  
                  {/* Discount badge */}
                  {product.discountPrice && product.discountPrice < product.price && (
                    <Box
                      sx={{
                        position: 'absolute',
                        top: 16,
                        left: 16,
                        bgcolor: 'primary.main',
                        color: 'white',
                        fontWeight: 'bold',
                        px: 2,
                        py: 0.5,
                        borderRadius: 2
                      }}
                    >
                      Save {discountPercentage}%
                    </Box>
                  )}
                </Box>
                
                {/* Thumbnail images */}
                {product.images && product.images.length > 1 && (
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                    {product.images.map((image, index) => (
                      <Box
                        key={index}
                        onClick={() => handleImageSelect(index)}
                        sx={{
                          width: 72,
                          height: 72,
                          borderRadius: 1,
                          overflow: 'hidden',
                          cursor: 'pointer',
                          border: index === selectedImage ? '2px solid' : '2px solid transparent',
                          borderColor: index === selectedImage ? 'primary.main' : 'transparent'
                        }}
                      >
                        <Box
                          component="img"
                          src={image.url}
                          alt={`${product.name} thumbnail ${index + 1}`}
                          sx={{
                            width: '100%',
                            height: '100%',
                            objectFit: 'cover'
                          }}
                        />
                      </Box>
                    ))}
                  </Box>
                )}
              </Box>
            </Grid>
            
            {/* Product Info */}
            <Grid item xs={12} md={6}>
              <Box>
                {/* Product type */}
                <Chip
                  icon={typeInfo.icon}
                  label={typeInfo.label}
                  color={
                    product.type === 'digital' ? 'info' : 
                    product.type === 'physical' ? 'warning' : 
                    'success'
                  }
                  size="small"
                  sx={{ mb: 2 }}
                />
                
                {/* Product name */}
                <Typography variant="h4" component="h1" color="white" gutterBottom>
                  {product.name}
                </Typography>
                
                {/* Author info */}
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar
                    src={product.author.avatar}
                    alt={product.author.username}
                    sx={{ mr: 1 }}
                  />
                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      Created by
                    </Typography>
                    <Typography variant="subtitle2" color="white">
                      {product.author.username}
                      {product.author.personalityType && ` • ${product.author.personalityType}`}
                    </Typography>
                  </Box>
                </Box>
                
                {/* Type description */}
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  {typeInfo.description}
                </Typography>
                
                {/* Price */}
                <Box sx={{ mb: 3 }}>
                  {product.discountPrice ? (
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Typography 
                        variant="h4" 
                        color="primary.light" 
                        sx={{ fontWeight: 'bold' }}
                      >
                        {formatCurrency(product.discountPrice)}
                      </Typography>
                      <Typography 
                        variant="h6" 
                        color="text.secondary" 
                        sx={{ 
                          ml: 2, 
                          textDecoration: 'line-through'
                        }}
                      >
                        {formatCurrency(product.price)}
                      </Typography>
                      <Chip
                        label={`Save ${discountPercentage}%`}
                        size="small"
                        color="primary"
                        sx={{ ml: 2 }}
                      />
                    </Box>
                  ) : (
                    <Typography 
                      variant="h4" 
                      color="primary.light" 
                      sx={{ fontWeight: 'bold' }}
                    >
                      {formatCurrency(product.price)}
                    </Typography>
                  )}
                </Box>
                
                {/* Categories and tags */}
                {(product.categories?.length > 0 || product.tags?.length > 0) && (
                  <Box sx={{ mb: 3 }}>
                    {product.categories?.length > 0 && (
                      <Box sx={{ mb: 1 }}>
                        <Typography variant="body2" color="text.secondary" display="inline" sx={{ mr: 1 }}>
                          Categories:
                        </Typography>
                        {product.categories.map((category, index) => (
                          <Chip
                            key={index}
                            label={category}
                            size="small"
                            sx={{ mr: 0.5, mb: 0.5 }}
                            onClick={() => navigate(`/shop?category=${category}`)}
                          />
                        ))}
                      </Box>
                    )}
                    
                    {product.tags?.length > 0 && (
                      <Box>
                        <Typography variant="body2" color="text.secondary" display="inline" sx={{ mr: 1 }}>
                          Tags:
                        </Typography>
                        {product.tags.map((tag, index) => (
                          <Chip
                            key={index}
                            label={tag}
                            size="small"
                            variant="outlined"
                            sx={{ mr: 0.5, mb: 0.5 }}
                            onClick={() => navigate(`/shop?search=${tag}`)}
                          />
                        ))}
                      </Box>
                    )}
                  </Box>
                )}
                
                {/* Stock info for physical products */}
                {product.type === 'physical' && (
                  <Box sx={{ mb: 3 }}>
                    <Typography variant="body2" color="text.secondary">
                      {product.stock > 0 
                        ? `In Stock (${product.stock} available)` 
                        : 'Out of Stock'}
                    </Typography>
                  </Box>
                )}
                
                {/* Quantity selector for physical products */}
                {product.type === 'physical' && (
                  <Box sx={{ mb: 3, display: 'flex', alignItems: 'center' }}>
                    <Typography variant="body2" color="text.secondary" sx={{ mr: 2 }}>
                      Quantity:
                    </Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <IconButton 
                        size="small" 
                        onClick={handleDecreaseQuantity}
                        disabled={quantity <= 1}
                        sx={{ color: 'white' }}
                      >
                        <RemoveIcon fontSize="small" />
                      </IconButton>
                      <TextField
                        value={quantity}
                        onChange={handleQuantityChange}
                        inputProps={{ min: 1, style: { textAlign: 'center' } }}
                        sx={{ 
                          width: 60,
                          '& .MuiInputBase-input': {
                            textAlign: 'center',
                            color: 'white'
                          }
                        }}
                        variant="outlined"
                        size="small"
                      />
                      <IconButton 
                        size="small" 
                        onClick={handleIncreaseQuantity}
                        disabled={product.stock !== null && quantity >= product.stock}
                        sx={{ color: 'white' }}
                      >
                        <AddIcon fontSize="small" />
                      </IconButton>
                    </Box>
                  </Box>
                )}
                
                {/* Duration selector for service products */}
                {product.type === 'service' && product.duration && (
                  <Box sx={{ mb: 3 }}>
                    <Typography variant="body2" color="text.secondary">
                      Duration: {product.duration} minutes
                    </Typography>
                    {product.location && (
                      <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                        <LocationOnIcon fontSize="small" sx={{ mr: 0.5, color: 'text.secondary' }} />
                        <Typography variant="body2" color="text.secondary">
                          Location: {product.location}
                        </Typography>
                      </Box>
                    )}
                  </Box>
                )}
                
                {/* Action buttons */}
                <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
                  {isInCart() ? (
                    <Button
                      variant="outlined"
                      color="primary"
                      startIcon={<ShoppingCartCheckoutIcon />}
                      onClick={() => navigate('/cart')}
                      fullWidth
                    >
                      View in Cart ({getCurrentCartQuantity()})
                    </Button>
                  ) : (
                    <Button
                      variant="contained"
                      color="primary"
                      startIcon={<ShoppingCartIcon />}
                      onClick={handleAddToCart}
                      fullWidth
                      disabled={product.type === 'physical' && product.stock <= 0}
                    >
                      Add to Cart
                    </Button>
                  )}
                  
                  <Button
                    variant="contained"
                    color="secondary"
                    onClick={handleBuyNow}
                    fullWidth
                    disabled={product.type === 'physical' && product.stock <= 0}
                  >
                    Buy Now
                  </Button>
                </Box>
                
                {/* Out of stock warning */}
                {product.type === 'physical' && product.stock <= 0 && (
                  <Alert severity="error" sx={{ mb: 3 }}>
                    This product is currently out of stock.
                  </Alert>
                )}
                
                {/* Additional product details (accordions) */}
                <Box>
                  <Accordion
                    sx={{ 
                      backgroundColor: 'rgba(0, 0, 0, 0.5)',
                      color: 'white',
                      mb: 1
                    }}
                  >
                    <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: 'white' }} />}>
                      <Typography>Description</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Typography variant="body2" color="text.secondary" sx={{ whiteSpace: 'pre-line' }}>
                        {product.description}
                      </Typography>
                    </AccordionDetails>
                  </Accordion>
                  
                  {product.type === 'digital' && (
                    <Accordion
                      sx={{ 
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        color: 'white',
                        mb: 1
                      }}
                    >
                      <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: 'white' }} />}>
                        <Typography>Download Information</Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Stack spacing={1}>
                          {product.fileType && (
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                File Type: <Typography component="span" color="white">{product.fileType}</Typography>
                              </Typography>
                            </Box>
                          )}
                          {product.fileSize && (
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                File Size: <Typography component="span" color="white">{product.fileSize} KB</Typography>
                              </Typography>
                            </Box>
                          )}
                          <Typography variant="body2" color="text.secondary">
                            You'll receive a download link immediately after purchase.
                          </Typography>
                        </Stack>
                      </AccordionDetails>
                    </Accordion>
                  )}
                  
                  {product.type === 'physical' && (
                    <Accordion
                      sx={{ 
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        color: 'white',
                        mb: 1
                      }}
                    >
                      <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: 'white' }} />}>
                        <Typography>Shipping Information</Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Stack spacing={1}>
                          {product.weight && (
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                Weight: <Typography component="span" color="white">{product.weight} g</Typography>
                              </Typography>
                            </Box>
                          )}
                          {product.dimensions && (
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                Dimensions: <Typography component="span" color="white">
                                  {product.dimensions.length || '–'} × {product.dimensions.width || '–'} × {product.dimensions.height || '–'} cm
                                </Typography>
                              </Typography>
                            </Box>
                          )}
                          <Typography variant="body2" color="text.secondary">
                            Shipping: <Typography component="span" color="white">{product.shippingInfo || 'Standard shipping (3-5 business days)'}</Typography>
                          </Typography>
                        </Stack>
                      </AccordionDetails>
                    </Accordion>
                  )}
                  
                  {product.type === 'service' && (
                    <Accordion
                      sx={{ 
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        color: 'white',
                        mb: 1
                      }}
                    >
                      <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: 'white' }} />}>
                        <Typography>Service Details</Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Stack spacing={1}>
                          <Box>
                            <Typography variant="body2" color="text.secondary">
                              Duration: <Typography component="span" color="white">{product.duration} minutes</Typography>
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="body2" color="text.secondary">
                              Location: <Typography component="span" color="white">{product.location || 'Online'}</Typography>
                            </Typography>
                          </Box>
                          {product.prerequisites && (
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                Prerequisites:
                              </Typography>
                              <Typography variant="body2" color="white">
                                {product.prerequisites}
                              </Typography>
                            </Box>
                          )}
                        </Stack>
                      </AccordionDetails>
                    </Accordion>
                  )}
                  
                  <Accordion
                    sx={{ 
                      backgroundColor: 'rgba(0, 0, 0, 0.5)',
                      color: 'white'
                    }}
                  >
                    <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: 'white' }} />}>
                      <Typography>About the Creator</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                        <Avatar
                          src={product.author.avatar}
                          alt={product.author.username}
                          sx={{ width: 64, height: 64, mr: 2 }}
                        />
                        <Box>
                          <Typography variant="subtitle1" color="white">
                            {product.author.username}
                          </Typography>
                          {product.author.personalityType && (
                            <Chip
                              label={product.author.personalityType}
                              size="small"
                              color="primary"
                              variant="outlined"
                            />
                          )}
                        </Box>
                      </Box>
                      {product.author.bio && (
                        <Typography variant="body2" color="text.secondary">
                          {product.author.bio}
                        </Typography>
                      )}
                      <Button
                        variant="outlined"
                        size="small"
                        onClick={() => navigate(`/readers/${product.author._id}`)}
                        sx={{ mt: 2 }}
                      >
                        View Profile
                      </Button>
                    </AccordionDetails>
                  </Accordion>
                </Box>
              </Box>
            </Grid>
          </Grid>
        </Paper>
        
        {/* Related Products */}
        {relatedProducts && relatedProducts.length > 0 && (
          <Box sx={{ mt: 6 }}>
            <Typography 
              variant="h4" 
              color="primary.light"
              sx={{ 
                mb: 3,
                textAlign: 'center',
                fontWeight: 300,
                textShadow: '0 0 10px rgba(255, 192, 203, 0.5)'
              }}
            >
              You May Also Like
            </Typography>
            <Grid container spacing={3}>
              {relatedProducts.map((relatedProduct) => (
                <Grid item xs={12} sm={6} md={4} key={relatedProduct._id}>
                  <ProductCard 
                    product={relatedProduct} 
                    onAddToCart={(product) => dispatch(addToCart(product, 1))}
                    isInCart={cartItems.some(item => item.product._id === relatedProduct._id)}
                  />
                </Grid>
              ))}
            </Grid>
          </Box>
        )}
      </Container>
    </Box>
  );
};

export default ProductDetail;
